---
# tasks file for gitlab
- name: install gitlab
  block:
  - name: Install packages
    apt:
      name:
        - curl
        - ca-certificates
        - tzdata
        - perl
      state: present
      update_cache: yes

  - name: Download installation script
    get_url:
      url: https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh
      dest: /tmp/script.deb.sh
      mode: 755

  - name: Run gitlab script
    shell: /tmp/script.deb.sh

  - name: Create directory for gitlab config
    file:
      path: /etc/gitlab
      state: directory
      mode: 755

  - name: Copy gitlab install config
    template:
      src: gitlab.rb.j2
      dest: /etc/gitlab/gitlab.rb
      mode: 700
    notify: reconfigure gitlab

  - name: Install gitlab
    apt:
      name:
        - gitlab-ce
      state: present
      update_cache: true
    environment:
      EXTERNAL_URL: "https://{{ gitlab_url }}"
    notify: reconfigure gitlab

  - name: flush handlers    
    meta: flush_handlers

  - name: Copy script to gitlab
    template:
      src: reset-token.sh.j2
      dest: /tmp/reset-token.sh
      mode: 755

  - name: Reset private token
    shell: /tmp/reset-token.sh
    args:
      creates: /tmp/token
  when: "'gitlab' in group_names"

- name: Create registration token
  delegate_to: localhost
  block:
  - name: get token
    become: false
    run_once: true
    uri:
      url: "https://{{ gitlab_url }}/api/v4/runners/reset_registration_token"
      method: POST
      validate_certs: no
      status_code: [201]
      headers:
        PRIVATE-TOKEN: "{{ private_token }}"
    register: reg_token

  - name: show token
    run_once: true
    debug:
      msg: "{{ reg_token.json.token }}"

  - name: save token
    run_once: true
    become: no
    copy:
      content: "{{ reg_token.json.token }}"
      dest: /tmp/register-token

- name: install runner
  block:
  - name: downloal runner package
    get_url:
      url: https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_amd64.deb
      dest: /tmp/gitlab-runner_amd64.deb
      mode: 644

  - name: install runner
    apt:
      deb: /tmp/gitlab-runner_amd64.deb
      state: present

  - name: copy registration script
    template:
      src: gitlab-register.sh.j2
      dest: /tmp/gitlab-register.sh
      mode: 755
    notify: register runner

  - name: Add apt key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Installing docker package
    apt:
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
      state: present
      update_cache: yes

  - name: Enable docker daemon
    systemd:
      name: docker
      state: started
      enabled: yes

  when: "'runner' in group_names"

- name: create git repos
  delegate_to: localhost
  become: no
  block:

  - name: create git repository
    run_once: true
    uri:
      url: https://{{ gitlab_url }}/api/v4/projects/
      method: POST
      validate_certs: no
      status_code: [201, 400]
      headers:
        Content-Type: "application/json"
        Private-Token: "{{ private_token }}"
      body:
        name: "wordpress"
        description: "Wordpress repository"
        path: "wordpress"
        initialize_with_readme: false
      body_format: json
 
  - name: create temprorary git repository
    run_once: true
    shell: 'git -c http.sslVerify=false clone https://root:{{ private_token }}@{{ gitlab_url }}/root/wordpress.git /tmp/wordpress && cd /tmp/wordpress && git switch -c main'
    args:
      creates: /tmp/wordpress

  - name: add Authorization token to repo
    run_once: true
    shell: 'cd /tmp/wordpress && git remote set-url origin https://root:{{ private_token }}@{{ gitlab_url }}/root/wordpress.git'

  - name: add gitlab.ci to repository
    run_once: true
    template:
      src: .gitlab-ci.yml.j2
      dest: /tmp/wordpress/.gitlab-ci.yml
      mode: 0666

  - name: Extract wordpress
    unarchive:
      remote_src: true
      src: https://wordpress.org/latest.tar.gz
      dest: "/tmp/wordpress/"
      extra_opts: [--strip-components=1]


  - name: check status gitlab-ci
    run_once: true
    shell: 'cd /tmp/wordpress && git status --porcelain'
    register: result
    changed_when: result.stdout != ""
    notify: commit git repo

  - name: flush handlers
    meta: flush_handlers

  - name: create ssh key
    run_once: true
    shell: 'cd /tmp && ssh-keygen -f app-key -N ""'
    args:
      creates: /tmp/app-key

  - name: get user id
    run_once: true
    uri:
      url: "https://{{ gitlab_url }}/api/v4/users?username=root"
      validate_certs: no
      method: GET
      headers:
        Private-Token: "{{ private_token }}"
    register: userid

  - name: get projects
    run_once: true
    uri:
      url: "https://{{ gitlab_url }}/api/v4/users/{{ userid.json.0.id }}/projects"
      validate_certs: no
      method: GET
      headers:
        Private-Token: "{{ private_token }}"
    register: projectid

  - name: show ssh-key
    run_once: true
    debug:
      msg: "{{ lookup('file','/tmp/app-key') }}"

  - name: Add ssh-key to gitlab
    run_once: true
    uri:
      url: "https://{{ gitlab_url }}/api/v4/projects/{{ item.id }}/variables"
      validate_certs: no
      method: POST
      status_code: [201,400]
      headers:
        Private-Token: "{{ private_token }}"
      body:
        key: "SSH_PRIVATE_KEY"
        value: "{{ lookup('file','/tmp/app-key') }}"
        variable_type: "env_var"
        environment_scope: "*"
      body_format: json
    loop: "{{ projectid.json }}"

- name: configure app server
  block:
  - name: create folder for public key
    become: true
    file:
      path: /root/.ssh
      state: directory
      mode: 700

  - name: copy public key
    copy:
      src: /tmp/app-key.pub
      dest: /root/.ssh/authorized_keys
      mode: 600

  - name: configure ssh to allow root login
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: '^PermitRootLogin'
      line: 'PermitRootLogin yes'

  - name: restart sshd
    systemd:
      name: sshd
      state: restarted
  when: "'app' in group_names"
